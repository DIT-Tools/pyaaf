Include("AAF.h")
Include("boost/format.hpp")
Include("AxTypes.h")


declaration_code("""

#include <exception>

std::string uid_to_string(_aafUID_t& id)
{
    if ((id.Data4[0] & 0x80) != 0 ) // bit 65 of a UUID is 1 for non-NCS UUIDs
    {
    return boost::str(boost::format("urn:uuid:%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x") % (int)id.Data1 % (int)id.Data2 % (int)id.Data3
                      % (int)id.Data4[0] % (int)id.Data4[1] % (int)id.Data4[2] % (int)id.Data4[3]
                      % (int)id.Data4[4] % (int)id.Data4[5] % (int)id.Data4[6] % (int)id.Data4[7]
                      );
    }
    
    else
    {
        return boost::str(boost::format("urn:smpte:ul:%02x%02x%02x%02x.%02x%02x%02x%02x.%08x.%04x%04x")
                          % (int)id.Data4[0] % (int)id.Data4[1] % (int)id.Data4[2] % (int)id.Data4[3]
                          % (int)id.Data4[4] % (int)id.Data4[5] % (int)id.Data4[6] % (int)id.Data4[7]
                          % (int)id.Data1 % (int)id.Data2 % (int)id.Data3
                          );
    }
}

std::string modID_to_string(aafMobID_t& mobId)

{
    
    if (mobId.SMPTELabel[11] == 0x00 && // "not defined" material generation method
        mobId.material.Data4[0] == 0x06 &&
        mobId.material.Data4[1] == 0x0E &&
        mobId.material.Data4[2] == 0x2B &&
        mobId.material.Data4[3] == 0x34 &&
        mobId.material.Data4[4] == 0x7F &&
        mobId.material.Data4[5] == 0x7F)
    {
        
        std::string f = "urn:smpte:umid:%02x%02x%02x%02x.%02x%02x%02x%02x.%02x%02x%02x%02x."
                        "%02x" 
                        "%02x%02x%02x."
                        "%02x%02x%02x%02x.%02x%02x%02x%02x.%08x.%04x%04x";

        return boost::str(boost::format(f)
                          % (int)mobId.SMPTELabel[0] % (int)mobId.SMPTELabel[1] % (int)mobId.SMPTELabel[2] % (int)mobId.SMPTELabel[3]
                          % (int)mobId.SMPTELabel[4] % (int)mobId.SMPTELabel[5] % (int)mobId.SMPTELabel[6] % (int)mobId.SMPTELabel[7]
                          % (int)mobId.SMPTELabel[8] % (int)mobId.SMPTELabel[9] % (int)mobId.SMPTELabel[10] % (int)mobId.SMPTELabel[11]
                          % (int)mobId.length
                          % (int)mobId.instanceHigh % (int)mobId.instanceMid % (int)mobId.instanceLow
                          % (int)mobId.material.Data4[0] % (int)mobId.material.Data4[1] % (int)mobId.material.Data4[2] % (int)mobId.material.Data4[3]
                          % (int)mobId.material.Data4[4] % (int)mobId.material.Data4[5] % (int)mobId.material.Data4[6] % (int)mobId.material.Data4[7]
                          % (int)mobId.material.Data1 % (int)mobId.material.Data2 % (int)mobId.material.Data3
                          
                          
                          );
    }
    
    else
    {
        std::string f = "urn:smpte:umid:%02x%02x%02x%02x.%02x%02x%02x%02x.%02x%02x%02x%02x."
                        "%02x"
                        "%02x%02x%02x."
                        "%08x.%04x%04x.%02x%02x%02x%02x.%02x%02x%02x%02x";
        
        return boost::str(boost::format(f)
                          % (int)mobId.SMPTELabel[0] % (int)mobId.SMPTELabel[1] % (int)mobId.SMPTELabel[2] % (int)mobId.SMPTELabel[3]
                          % (int)mobId.SMPTELabel[4] % (int)mobId.SMPTELabel[5] % (int)mobId.SMPTELabel[6] % (int)mobId.SMPTELabel[7]
                          % (int)mobId.SMPTELabel[8] % (int)mobId.SMPTELabel[9] % (int)mobId.SMPTELabel[10] % (int)mobId.SMPTELabel[11]
                          % (int)mobId.length
                          % (int)mobId.instanceHigh % (int)mobId.instanceMid % (int)mobId.instanceLow
                          % (int)mobId.material.Data1 % (int)mobId.material.Data2 % (int)mobId.material.Data3
                          % (int)mobId.material.Data4[0] % (int)mobId.material.Data4[1] % (int)mobId.material.Data4[2] % (int)mobId.material.Data4[3]
                          % (int)mobId.material.Data4[4] % (int)mobId.material.Data4[5] % (int)mobId.material.Data4[6] % (int)mobId.material.Data4[7]
                          );
        
    }
}


void string_to_uid(_aafUID_t& id, AxString string)
{
    const wchar_t* uri = string.c_str();
    
    unsigned int bytes[16];
    
    if (wcsncmp(uri, L"urn:uuid", 8) == 0)
    {
        int ret = swscanf(uri,
                          L"urn:uuid:%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
                          &bytes[0], &bytes[1], &bytes[2], &bytes[3],
                          &bytes[4], &bytes[5], &bytes[6], &bytes[7],
                          &bytes[8], &bytes[9], &bytes[10], &bytes[11],
                          &bytes[12], &bytes[13], &bytes[14], &bytes[15]);
        
        if (ret != 16)
        {
            throw std::invalid_argument("Invalid AUID");
        }
    }
    else
    {
        int ret = swscanf(uri,
                          L"urn:smpte:ul:%02x%02x%02x%02x.%02x%02x%02x%02x.%02x%02x%02x%02x.%02x%02x%02x%02x",
                          &bytes[8], &bytes[9], &bytes[10], &bytes[11],
                          &bytes[12], &bytes[13], &bytes[14], &bytes[15],
                          &bytes[0], &bytes[1], &bytes[2], &bytes[3],
                          &bytes[4], &bytes[5],
                          &bytes[6], &bytes[7]);
        
        if (ret != 16)
        {
            throw std::invalid_argument("Invalid AUID");
        }
    }
    
    id.Data1 = ((aafInt32)bytes[0] << 24) + ((aafInt32)bytes[1] << 16) +
    ((aafInt32)bytes[2] << 8) + (aafInt32)(bytes[3]);
    id.Data2 = ((aafInt16)bytes[4] << 8) + (aafInt16)(bytes[5]);
    id.Data3 = ((aafInt16)bytes[6] << 8) + (aafInt16)(bytes[7]);
    for (unsigned int i=0; i<8; i++)
    {
        id.Data4[i] = (aafInt8)bytes[i + 8];
    }
}

void string_to_mobId(aafMobID_t& mobId, AxString string)
{
    const wchar_t* uri = string.c_str();
    
    unsigned int bytes[32];
    
    int ret = swscanf(uri,
                      L"urn:smpte:umid:%02x%02x%02x%02x.%02x%02x%02x%02x.%02x%02x%02x%02x."
                      L"%02x"
                      L"%02x%02x%02x."
                      L"%02x%02x%02x%02x.%02x%02x%02x%02x.%02x%02x%02x%02x.%02x%02x%02x%02x",
                      &bytes[0], &bytes[1], &bytes[2], &bytes[3],
                      &bytes[4], &bytes[5], &bytes[6], &bytes[7],
                      &bytes[8], &bytes[9], &bytes[10], &bytes[11],
                      &bytes[12],
                      &bytes[13], &bytes[14], &bytes[15],
                      &bytes[16], &bytes[17], &bytes[18], &bytes[19],
                      &bytes[20], &bytes[21],
                      &bytes[22], &bytes[23],
                      &bytes[24], &bytes[25], &bytes[26], &bytes[27],
                      &bytes[28], &bytes[29], &bytes[30], &bytes[31]);
    
    if (ret != 32)
    {
        throw std::invalid_argument("Invalid MobId");
    }
    
    unsigned int i;
    for (i=0; i<12; i++)
    {
        mobId.SMPTELabel[i] = (aafInt8)bytes[i];
    }
    mobId.length = (aafInt8)bytes[12];
    mobId.instanceHigh = (aafInt8)bytes[13];
    mobId.instanceMid = (aafInt8)bytes[14];
    mobId.instanceLow = (aafInt8)bytes[15];
    
    // handle special case of OMF UMIDs where the material number if half swapped
    if (bytes[11] == 0x00 &&
        bytes[16] == 0x06 && bytes[17] == 0x0E && bytes[18] == 0x2B &&
        bytes[19] == 0x34 && bytes[20] == 0x7F && bytes[21] == 0x7F)
    {
        mobId.material.Data1 = ((aafInt32)bytes[24] << 24) + ((aafInt32)bytes[25] << 16) +
        ((aafInt32)bytes[26] << 8) + (aafInt32)(bytes[27]);
        mobId.material.Data2 = ((aafInt16)bytes[28] << 8) + (aafInt16)(bytes[29]);
        mobId.material.Data3 = ((aafInt16)bytes[30] << 8) + (aafInt16)(bytes[31]);
        for (i=0; i<8; i++)
        {
            mobId.material.Data4[i] = (aafInt8)bytes[i + 16];
        }
    }
    else
    {
        mobId.material.Data1 = ((aafInt32)bytes[16] << 24) + ((aafInt32)bytes[17] << 16) +
        ((aafInt32)bytes[18] << 8) + (aafInt32)(bytes[19]);
        mobId.material.Data2 = ((aafInt16)bytes[20] << 8) + (aafInt16)(bytes[21]);
        mobId.material.Data3 = ((aafInt16)bytes[22] << 8) + (aafInt16)(bytes[23]);
        for (i=0; i<8; i++)
        {
            mobId.material.Data4[i] = (aafInt8)bytes[i + 24];
        }
    }
}

"""
)
#obj = Class("_aafUID_t", "AAFTypes.h")

#exclude(obj.Data4)
#rename(obj, "aafUID_t")

module_code("""
    class_< _aafUID_t >("aafUID_t", init<  >())
        .def(init< const _aafUID_t& >())
        .def_readwrite("Data1", &_aafUID_t::Data1)
        .def_readwrite("Data2", &_aafUID_t::Data2)
        .def_readwrite("Data3", &_aafUID_t::Data3)
        .def("toString",uid_to_string)
        .def("fromString",string_to_uid)
        .def("__str__",uid_to_string)
    ;

    class_< _aafMobID_t >("aafMobID_t", init<  >())
        .def(init< const _aafMobID_t& >())
        .def_readwrite("length", &_aafMobID_t::length)
        .def_readwrite("instanceHigh", &_aafMobID_t::instanceHigh)
        .def_readwrite("instanceMid", &_aafMobID_t::instanceMid)
        .def_readwrite("instanceLow", &_aafMobID_t::instanceLow)
        .def_readwrite("material", &_aafMobID_t::material)
        .def("toString",modID_to_string)
        .def("fromString",string_to_mobId)
        .def("__str__",modID_to_string)
    ;

"""
)


#obj = Class("_aafMobID_t", "AAFTypes.h")
#rename(obj, "aafMobID_t")
#exclude(obj.SMPTELabel)

obj = Class("_aafRational_t", "AAFTypes.h")
rename(obj, "aafRational_t")

obj = Class("_aafSourceRef_t", "AAFTypes.h")
rename(obj, "aafSourceRef_t")

obj = Enum("_aafCompressEnable_e", "AAFTypes.h")
rename(obj, "aafCompressEnable_e")