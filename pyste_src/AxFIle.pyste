#Import("AxBaseObj.pyste")

PySaveAs = Wrapper("PySaveAs",
    """
void PySaveAs(AxFile file, AxString path)
{

AxFile newfile;
newfile.OpenNewModify( path );
file.SaveCopyAs(newfile);
newfile.Close();
    }
""")

declaration_code("""

#include "AxEx.h"
#include "AxHrMap.h"
#include "AxUtil.h"

#include "AAF.h"
#include "AAFFileKinds.h"
#include "AAFResult.h"

#include <sys/stat.h>

using namespace std;

bool fileExists(const string& filename)
{
    struct stat buf;
    if (stat(filename.c_str(), &buf) != -1)
    {
        return true;
    }
    return false;
}

void pySaveAsXml(AxFile file, string path)
{

if (fileExists(path))
{

if( remove( path.c_str() ) != 0 )
{
    HRESULT hr = AAFRESULT_NOT_WRITEABLE;
    throw AxExHResult( hr, L"Cannot Overwrite File" );
}

}

AxString fileName( AxStringUtil::mbtowc( path.c_str() ) );

IAAFFileSP outfile;
AxProductIdentification ident;

CHECK_HRESULT(AAFFileOpenNewModifyEx(fileName.c_str(),
                                &kAAFFileKind_AafXmlText, 0,
                                const_cast<aafProductIdentification_t*>( ident.getProductId() ),
                                &outfile ));
                     
AxFile newfile = AxFile(outfile);
file.SaveCopyAs(newfile);
newfile.Close();

}


"""
)





axfile = Class("AxFile", "AxFile.h")
exclude(axfile.dump)
exclude(axfile.operator['<<'])
set_wrapper(axfile.SaveCopyAs, PySaveAs)
add_method(axfile, "pySaveAsXml")
rename(axfile.pySaveAsXml, "toXml")