#Import("AxBaseObj.pyste")

Include("AxFile.h")
Include("AxHeader.h")
Include("AxEx.h")
Include("AxHrMap.h")
Include("AxUtil.h")
Include("AAF.h")
Include("AAFFileKinds.h")
Include("AAFResult.h")
Include("sys/stat.h")

declaration_code("""

void PySaveAs(AxFile& file, AxString path)
{

AxFile newfile;
newfile.OpenNewModify( path );
file.SaveCopyAs(newfile);
newfile.Close();
}

std::wstring AxFile_tostring(AxFile& o)
{
    std::wstringstream buffer;
    std::wstreambuf * old = std::wcout.rdbuf(buffer.rdbuf());
    
    o.dump( std::wcout );

    std::wstring text = buffer.str();
    std::wcout.rdbuf(old);
    
    return text;
}
    
    

using namespace std;

bool fileExists(const string& filename)
{
    struct stat buf;
    if (stat(filename.c_str(), &buf) != -1)
    {
        return true;
    }
    return false;
}

void pySaveAsXml(AxFile& file, string path)
{

if (fileExists(path))
{

if( remove( path.c_str() ) != 0 )
{
    HRESULT hr = AAFRESULT_NOT_WRITEABLE;
    throw AxExHResult( hr, L"Cannot Overwrite File" );
}

}

AxString fileName( AxStringUtil::mbtowc( path.c_str() ) );

IAAFFileSP outfile;
AxProductIdentification ident;

CHECK_HRESULT(AAFFileOpenNewModifyEx(fileName.c_str(),
                                &kAAFFileKind_AafXmlText, 0,
                                const_cast<aafProductIdentification_t*>( ident.getProductId() ),
                                &outfile ));
                     
AxFile newfile = AxFile(outfile);
file.SaveCopyAs(newfile);
newfile.Close();

}



namespace  {

BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(AxFile_OpenNewModify_overloads_1_3, OpenNewModify, 1, 3)

BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(AxFile_OpenExistingModify_overloads_1_3, OpenExistingModify, 1, 3)

BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(AxFile_OpenExistingRead_overloads_1_2, OpenExistingRead, 1, 2)

BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(AxFile_OpenTransient_overloads_0_1, OpenTransient, 0, 1)
 }

"""
)


module_code("""

    class_< AxFile >("AxFile", init<  >())
        .def(init< IAAFFileSP >())
        .def(init< const AxFile& >())
        .def("isAAFFile", &AxFile::isAAFFile)
        .def("OpenNewModify", &AxFile::OpenNewModify, AxFile_OpenNewModify_overloads_1_3())
        .def("OpenExistingModify", &AxFile::OpenExistingModify, AxFile_OpenExistingModify_overloads_1_3())
        .def("OpenExistingRead", &AxFile::OpenExistingRead, AxFile_OpenExistingRead_overloads_1_2())
        .def("OpenTransient", &AxFile::OpenTransient, AxFile_OpenTransient_overloads_0_1())
        .def("Save", &AxFile::Save)
        .def("SaveCopyAs", &PySaveAs)
        .def("Close", &AxFile::Close)
        .def("GetName", &AxFile::getName, return_value_policy< copy_const_reference >())
        .def("GetHeader", &AxFile::getHeader)
        .staticmethod("isAAFFile")
        .def("to_IAAFFileSP", &AxFile::operator IAAFFileSP)
        .def("toXml", pySaveAsXml)
        .def("__str__",AxFile_tostring)
    ;

""")