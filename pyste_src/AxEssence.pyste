
Include("AAFTypes.h")
Include("AAFDataBuffer.h")
PyWriteSamples = Wrapper("PyWriteSamples", """
AxEssenceAccess::WriteResult PyWriteSamples(AxEssenceAccess& axEssenceAccess, AAFDataBuffer& buff)
{
    aafUInt32 nSamples = buff.length();
    aafUInt32 bufLength = buff.size();
    
    //std::cout << nSamples << " " << bufLength;
    return axEssenceAccess.WriteSamples(nSamples,bufLength, buff);
    
}
"""
)



Class('AxEssenceMultiAccess', "AxEssence.h")
obj = Class('AxEssenceAccess', "AxEssence.h")

set_wrapper(obj.WriteSamples,PyWriteSamples)

Class('AxLocator', "AxEssence.h")
Class('AxEssenceDescriptor', "AxEssence.h")
#Class('AxFileDescriptor', "AxEssence.h")
obj = Class('AxWAVEDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)

obj = Class('AxDigitalImageDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxCDCIDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxRGBADescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxTapeDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxFilmDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxPhysicalDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxImportDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxRecordingDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
#Class('AxEssenceFormat', "AxEssence.h")
obj = Class('AxAuxiliaryDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxSoundDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)

#obj = Class("AxEssenceFormat", "AxEssence.h")
#exclude(obj.AddFormatSpecifier)
#exclude(obj.GetFormatSpecifier)

declaration_code("""

void PyAddFormatSpecifier(AxEssenceFormat &axEssenceFormat,
                          const aafUID_t essenceFormatCode,
                          aafUInt32 sampleSize)
{
    axEssenceFormat.AddFormatSpecifier( essenceFormatCode, sizeof( sampleSize ),
                                       reinterpret_cast<aafUInt8*>(&sampleSize) );
}

"""
)

module_code("""
    class_< AxEssenceFormat, boost::noncopyable >("AxEssenceFormat", init< IAAFEssenceFormatSP >())
        .def("to_IAAFEssenceFormatSP", &AxEssenceFormat::operator IAAFEssenceFormatSP)
        .def("AddFormatSpecifier", PyAddFormatSpecifier)
    ;

"""
)

