
Include("AAFTypes.h")
Include("AAFDataBuffer.h")
PyWriteSamples = Wrapper("PyWriteSamples", """

AxEssenceAccess::WriteResult PyWriteSamples(AxEssenceAccess& axEssenceAccess, boost::python::list l)
{
    
    const int length = boost::python::len(l);
    aafUInt16 values[length];
    
    for (int i=0; i < length; i++)
    {
        values[i] = boost::python::extract<aafUInt16>(l[i]);
    }
    
    
    return axEssenceAccess.WriteSamples(length,
                                        sizeof(values[0]) * length,
                                        reinterpret_cast<aafDataBuffer_t>(&values));
}
"""
)

PySetVideoLineMap = Wrapper("PySetVideoLineMap", """
void PySetVideoLineMap(AxDigitalImageDescriptor& a, boost::python::list l)
{
    
    const int length = boost::python::len(l);
    aafInt32 values[length];

    for (int i=0; i < length; i++)
    {
        values[i] = boost::python::extract<aafUInt16>(l[i]);
    }
    a.SetVideoLineMap(length, values);
    
}
"""
)



Class('AxEssenceMultiAccess', "AxEssence.h")
obj = Class('AxEssenceAccess', "AxEssence.h")

set_wrapper(obj.WriteSamples,PyWriteSamples)

Class('AxLocator', "AxEssence.h")
Class('AxEssenceDescriptor', "AxEssence.h")
#Class('AxFileDescriptor', "AxEssence.h")
obj = Class('AxWAVEDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)

obj = Class('AxDigitalImageDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
set_wrapper(obj.SetVideoLineMap, PySetVideoLineMap)
obj = Class('AxCDCIDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxRGBADescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxTapeDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxFilmDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxPhysicalDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxImportDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxRecordingDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
#Class('AxEssenceFormat', "AxEssence.h")
obj = Class('AxAuxiliaryDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)
obj = Class('AxSoundDescriptor', "AxEssence.h")
exclude(obj.GetCodecDef)

#obj = Class("AxEssenceFormat", "AxEssence.h")
#exclude(obj.AddFormatSpecifier)
#exclude(obj.GetFormatSpecifier)

declaration_code("""

template <typename T>
void PyAddFormatSpecifier(AxEssenceFormat &axEssenceFormat,
                          const aafUID_t essenceFormatCode,
                          T sampleSize)
{
    axEssenceFormat.AddFormatSpecifier( essenceFormatCode, sizeof( sampleSize ),
                                       reinterpret_cast<aafUInt8*>(&sampleSize) );
};

"""
)

module_code("""
    class_< AxEssenceFormat, boost::noncopyable >("AxEssenceFormat", init< IAAFEssenceFormatSP >())
        .def("to_IAAFEssenceFormatSP", &AxEssenceFormat::operator IAAFEssenceFormatSP)
        .def("AddFormatSpecifier", PyAddFormatSpecifier<aafUInt32>)
        .def("AddFormatSpecifier", PyAddFormatSpecifier<aafRect_t>)
        ;

"""
)

